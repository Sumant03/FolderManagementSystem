import React, { useEffect } from 'react';
import axios from 'axios';
import {useState,ChangeEvent} from "react";


import DisplayName from './components/DisplayName';

import {structure} from "./interfaces/interface"

import './App.css';
import logo from './logo.svg';
import {DummmyFileStructure} from "./utils/DummyFileStructure"
// import LeftBar from './components/LeftBar';

function App() {

let url="";

  const [type,setType]=useState<string>("");
  const [name,setName]=useState<string>("");
  const [creator,setCreator]=useState<string>("");
  const [size,setSize]=useState<number>(0);
  const [flag,setFlag]=useState<Boolean>(false);
  const [list,setList]=useState<structure[]>(DummmyFileStructure);
  let [currentList,setCurrentList]=useState<structure[]>([]);
  const [result,setResult]=useState<any>({});
  const [queryValue,setQueryValue]=useState<string>("");
  const [path,setPath]=useState<string>("root");
  const [directory,setDirectory]=useState<any[]>([path]);


  const buttonHandler = () => {

    let arr = [...directory,name];
    console.log(directory,"directory")
    const newList= { type: type,name: name,creator:creator,size: size,directory:arr,parent:path};

    console.log(newList," newList at 38");

   

        setList([...list,newList]);
        setType(type)
        setName("");
        let addDirectory=path.split("/");
        console.log(addDirectory);
        
        setDirectory(addDirectory)
        setCreator("");
        setSize(0);  

        currentList=list.filter((singleList)=>{
          if(JSON.stringify(directory)==JSON.stringify(singleList.directory)){
            console.log(directory,"at 113");
            console.log(singleList.directory,"at 114");
            
            
            return singleList
          };
        })
  };

  useEffect(()=>{
     url="https://api.unsplash.com/search/photos?&per_page=100&page=100&query="+queryValue+"&client_id=nkIb2TlHTpFd4IRQWTgFMF9cFwA60eemmLpwZ7H-cYU"  
    console.log(directory,"at 50");
    console.log(list)
    // console.log(path)
    //console.log(result,"resultsArray");
    // console.log(queryValue,"queryvalue");
    
  },[directory,list,path,queryValue,result])
  

  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    if (event.target.name === "name") {
      setName(event.target.value);
    } 
    else if(event.target.name=="creator"){
      setCreator(event.target.value);
    } 
    else if(event.target.name="size"){
      setSize(Number(event.target.value))
    }
  }
  
  // const searchImage=(query:string)=>{
  //   console.log("queryvalueIsNull");

  //     setQueryValue(query);
  //     setTimeout(()=>{  handleSubmit()},2000)
    
  // }

  const settingPathValue=(val:string,type:string)=>{
    
   
      
      // console.log("inside settingpath");
      // console.log(type,"type");
      
      if(type=="file"){

        // console.log(val+  " inside query")
        setQueryValue(val);
        // console.log(queryValue,"line 89");
        
        if(queryValue.length>1){
          handleSubmit()
          setPath(path+"/"+val)
          // console.log(path);
        }

      }
      else{

        // console.log(val+  " inside query")
        setQueryValue(val);
        // console.log(queryValue,"line 103");

        if(queryValue.length>1){
          let newPath = path.split('/');
          if(newPath[newPath.length-1]!=val){
        setPath(path+"/"+val)
        // console.log(path,"at 107");
          }
          let addDirectory=path.split("/");
          setDirectory(addDirectory);
          console.log(addDirectory,'at 125')

        let pathArray = path.split('/');
        // console.log(pathArray,"at 110");
          currentList=list.filter((singleList)=>{
            if(JSON.stringify(pathArray)==JSON.stringify(singleList.directory)){
              // console.log(pathArray,"at 113");
              // console.log(singleList.directory,"at 114");
              
              
              return singleList
            };
          })
          console.log(directory,name,'at 139')
          console.log(currentList,"at 121");
          if(currentList.length>0){
            
            setCurrentList(currentList);
          }
        }
      }

      
      
  }

  // const handlePhotoname=(event:ChangeEvent<HTMLInputElement>)=>{
  //      setQueryValue(event.target.value);
  // }

  function handleSubmit(){
   console.log("inside handleSubmit");
   console.log(queryValue,"currentValueofQuerry");
   
    // &per_page=30&page=" + currPage
 
    axios.get(url)
    .then((response)=>{
       setResult(response.data.results);
       console.log(result);
    })
    // .catch((err)=>{
      
    // })


  }

  const updatePath=()=>{
    let newPath = path.split('/');
    newPath.splice(newPath.length - 1, 1);
    console.log(newPath);
    if(newPath.length==0){
      newPath=["root"]
    }
    let validPath=newPath.join('/')
    setPath(validPath);
    currentList=list.filter((singleList)=>{
      if(JSON.stringify(validPath)==JSON.stringify(singleList.directory)){
        console.log(validPath,"at 113");
        console.log(singleList.directory,"at 114");
        
        
        return singleList
      };
    })
 
    setResult([]);
    setQueryValue("")
  }

  const searchFolder=(e: ChangeEvent<HTMLInputElement>)=>{
    const originalList=list;
  

   currentList=list.filter((singleList)=>{

     return singleList.name.toLowerCase().includes(e.target.value.toLowerCase());
   })

    if(currentList.length==0){
     setCurrentList(originalList);
    }else{
      setCurrentList(currentList)
    }
  }

// let currentList=[];
//     useEffect(()=>{
      
//      currentList list.filter((ls)=>{
      
//         ls.directory

//       })

      
//     },[path])




  return (
    <div className="App">
        
        <div className='left'>
            <div className='leftContent'>
            <div style={{color:"grey",fontWeight:"bold",fontSize:"large"}}>Root</div>
            
                  <div className="hasAllFoldersName">
                  {list.map((list: structure, key: number) => {
                    return (<DisplayName key={key} listDetails={list}/>);
                  })}
                  </div>
 
            </div>
        </div>
      
        <div className='right'>
          {/* rightContent */}
          <div className='rightContent' style={{overflow: "auto"}}>
          <div style={{width:"100%",display:"flex"}}>
          <i  onClick={updatePath} className="bi bi-arrow-return-left" style={{ fontSize:"40px"}}></i>
              <div className='navbar'>
                <span style={{fontWeight:"bold",fontSize:"large",marginTop:"70px"}}>{path}</span>
                <span>
                    <div style={{marginTop:"40px",height:"50px",width:"130px",padding:"30px"}}>
                      <input onChange={searchFolder} placeholder='Search your Folder/File....' style={{height:"40px",width:"300px"}}/>
                    </div>
              </span>
              </div>

          </div>

          {/* <div>
              <h1>Unsplash API</h1>
              <input onChange={handlePhotoname} value={queryValue}type="text" name="photo" placeholder="Search photo"/>
              <button onClick={handleSubmit} type="submit">Search</button>
          </div> */}

          <div>
              {result.length?result.map((photo:any,key:number)=>{
                return <img width="100px" height="100px" style={{margin:"10px",borderRadius:"15px"}}key={key} src={photo.urls.small}/>
              }):""}
            </div>
  
          </div>

          <div className='displayData' style={{display:"flex",overflow: "auto"}}>
              <span style={{display:"flex",flexWrap:"wrap"}}>{ 
                                  
                                  currentList.length>0?

                                  currentList.map((singleList: structure, key: number) => {
    

               return  (         <span key={key}style={{alignItems:"center"}}>
                                 <span  onClick={()=> settingPathValue(singleList.name,singleList.type)} style={{color: 'lightblue'}} className={"size bi bi-folder-fill "}></span>
                               <p style={{alignContent:"center"}}>{singleList.name}</p>
                   </span>)


                                    }):

                                    list.length>1?
                                    list.map((singleList: structure, key: number) => {
                                        

                                      return  (         <span key={key}style={{alignItems:"center"}}>
                                                                  <span  onClick={()=> settingPathValue(singleList.name,singleList.type)} style={{color: 'lightblue'}} className={"size bi bi-folder-fill "}></span>
                                                                  <p style={{alignContent:"center"}}>{singleList.name}</p>
                                                      </span>)


                                    }):

                                    <i className="size bi bi-plus-square-dotted"  data-toggle="modal" data-target="#exampleModalCenter" ></i>}
                                  
              </span>
              </div>
        </div> 

        <div className="folderDiv" >

          <div>
              <span>
                      <i className="size bi bi-plus-square-dotted" style={{margin:"40px"}}  data-toggle="modal" data-target="#exampleModalCenter" ></i>
              </span>
          </div>


          <div className="modal fade" id="exampleModalCenter" tabIndex={-1} role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div className="modal-dialog modal-dialog-centered" role="document">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title" id="exampleModalLongTitle" >Create New</h5>
                  <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div className="modal-body">
                  <span>
                    <span>
                      <button  onClick={()=> setType("file")} className='create btn-primary'>Create File</button>
                    </span>
                    <span>
                      <button  onClick={()=>setType("folder")}className='create btn-primary'>Create Folder</button>
                    </span>
                  </span>
                  <div className='modalInputs'>
                    <div>
                      <input value={name}  name="name" onChange={handleChange} placeholder='Name'/>
                    </div>
                    <div>
                      <input value={creator} name="creator" onChange={handleChange} placeholder='Creator'/>
                    </div>
                    <div>
                      <input value={size} name="size" onChange={handleChange} placeholder='Size'/>
                    </div>
                    <div>
                      <input placeholder='Date'/>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button type="button" className="btn btn-secondary" data-dismiss="modal">Close</button>
                  <button onClick={buttonHandler} type="button" data-dismiss="modal" className="buttonClick btn btn-primary">Save changes</button>
                </div>
              </div>
            </div>
          </div>
        </div>

    </div>
  );
}
export default App;










 (currentList.length>0&&path!='root')?

                                  currentList.map((singleList: structure, key: number) => {
    

               return  (         <span key={key}style={{alignItems:"center"}}>
                                 <span  onClick={()=> settingPathValue(singleList.name,singleList.type)} style={{color: 'lightblue'}} className={"size bi bi-folder-fill "}></span>
                               <p style={{alignContent:"center"}}>{singleList.name}</p>
                   </span>)


                                    }):


currentList=list.filter((singleList)=>{
            if(JSON.stringify(pathArray)==JSON.stringify(singleList.parent)){
              // console.log(pathArray,"at 113");
              // console.log(singleList.directory,"at 114");
              
              
              return singleList
            };
          })    





          <div>
       {listDetails.type=="folder"?<div  className="accordion-item" style={{backgroundColor:"rgb(225, 233, 233);"}}>
            <h2 style={{display:"flex", margin:"20px"}} className="accordion-header" id="headingOne" >
             <span><i style={{margin:"10px"}}className="bi bi-folder"></i></span>
              <button onClick={() => {
          settingPathValue(listDetails.name,listDetails.type);
        }} className="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                <h4>{listDetails.name}</h4>
              </button>
            </h2>

          </div>:
          <div onClick={() => {
            settingPathValue(listDetails.name,listDetails.type);
          }} >
             <h2 style={{display:"flex", margin:"20px"}} className="accordion-header" id="headingOne" >
         
              <button className="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
               <i style={{margin:"10px",fontSize:"30px"}}className="bi bi-file-text"></i>

               <h4>{listDetails.name}</h4>
              </button>
            </h2>
           
          
          </div>}
    
     </div>                                
