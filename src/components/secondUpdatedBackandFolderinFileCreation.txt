import React, { useEffect } from 'react';
import axios from 'axios';
import {useState,ChangeEvent} from "react";


import DisplayName from './components/DisplayName';

import {structure} from "./interfaces/interface"

import './App.css';
import logo from './logo.svg';
import {DummmyFileStructure} from "./utils/DummyFileStructure"

// import LeftBar from './components/LeftBar';
let updatedlist=[];
function App() {

  let url="";


  const [type,setType]=useState<string>("");
  const [name,setName]=useState<string>("");
  const [creator,setCreator]=useState<string>("");
  const [size,setSize]=useState<number>(0);
  const [flag,setFlag]=useState<boolean>(false);
  const [list,setList]=useState<structure[]>(DummmyFileStructure);
  const [rootList,setRootList]=useState<structure[]>(DummmyFileStructure);
  const [sideBarList,setSidebarList]=useState<structure[]>([]);
  let [currentList,setCurrentList]=useState<structure[]>([]);
  const [result,setResult]=useState<any>({});
  const [queryValue,setQueryValue]=useState<string>("");
  const [path,setPath]=useState<string>("root");



  const buttonHandler = () => {

  let id= (new Date().getTime() * Math.random() * 100000)
    const newList= { id:id,type: type,name: name,creator:creator,size: size,parent:path};

    console.log(newList," newList at 38");

      //  if()

        setList([...list,newList]);
        if(newList.parent=='root'){
          setRootList([...rootList,newList])
          sideBar([newList]);
        }
        const _list=[...list,newList];
        if(path!='root'){
          let listToberender=_list.filter((singleList)=>{
            console.log(path==singleList.parent);  
            console.log(path);
            console.log(singleList.parent);
            
              
            if(path==singleList.parent){  
                
              return singleList
            };
          }) 
      
          setCurrentList(listToberender);
          console.log(currentList);
        }
       
        setType(type)
        setName("");
        setCreator("");
        setSize(0);  


  };

  useEffect(()=>{
     url="https://api.unsplash.com/search/photos?&per_page=100&page=100&query="+queryValue+"&client_id=nkIb2TlHTpFd4IRQWTgFMF9cFwA60eemmLpwZ7H-cYU"  

    console.log(list,"list")
    console.log(path,"path")
    console.log(currentList,"currentList");
   
    console.log("------------------------");
    
    //console.log(result,"resultsArray");
    // console.log(queryValue,"queryvalue");
    
  },[list,path,result,queryValue])

  useEffect(()=>{
    sideBar([])
    console.log("display it");
    console.log("------------------------");
    return () => {
      console.log("unmounted");
    };
  
  },[])
  

  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {
    if (event.target.name === "name") {
      setName(event.target.value);
    } 
    else if(event.target.name=="creator"){
      setCreator(event.target.value);
    } 
    else if(event.target.name="size"){
      setSize(Number(event.target.value))
    }
  }
  
  // const searchImage=(query:string)=>{
  //   console.log("queryvalueIsNull");

  //     setQueryValue(query);
  //     setTimeout(()=>{  handleSubmit()},2000)
    
  // }
  let pathValue="";
  const settingPathValue=(val:string,type:string)=>{   
      // console.log("inside settingpath");
      // console.log(type,"type");    
      if(type=="file"){

        // console.log(val+  " inside query")
        setQueryValue(val);
        // console.log(queryValue,"line 89");
         
            if(queryValue.length>1){
              pathValue=path+"/"+val
              setPath(pathValue)
              handleSubmit()
              // console.log(path);
            }
            if(path!="root"){
              let listToberender=list.filter((singleList)=>{
                console.log(pathValue==singleList.parent);  
                console.log(path);
                console.log(singleList.parent);
                
                  
                if(pathValue==singleList.parent){  
                    
                  return singleList
                };
              }) 
          updateCurrentList(pathValue)
          setCurrentList(listToberender);
          console.log(currentList);
        }

      }
      else{

        // console.log(val+  " inside query")
        setQueryValue(val);
        // console.log(queryValue,"line 103");
         let newPath=[];
        if(queryValue.length>1){
          newPath = path.split("/");
          if(newPath[newPath.length-1]!=val){
                 pathValue=path+"/"+val
                 setPath(path+"/"+val)
                 
        // console.log(path,"at 107");
          }else{
            console.log("'same value");
            
          }
        
        }

        if(path!="root"){
          let listToberender=list.filter((singleList)=>{
            console.log(path==singleList.parent);  
            console.log(path);
            console.log(singleList.parent);
            
              
            if(path==singleList.parent){  
                
              return singleList
            };
          }) 
          updateCurrentList(pathValue)
          setCurrentList(listToberender);
          console.log(currentList);
        }
        
      }

      
      
  }

  // const handlePhotoname=(event:ChangeEvent<HTMLInputElement>)=>{
  //      setQueryValue(event.target.value);
  // }

  function handleSubmit(){
   console.log("inside handleSubmit");
   console.log(queryValue,"currentValueofQuerry");
   
    // &per_page=30&page=" + currPage
 
    axios.get(url)
    .then((response)=>{
       setResult(response.data.results);
       console.log(result);
    })
    // .catch((err)=>{
      
    // })


  }

  const updatePath=()=>{
   
    let newPath = path.split("/");
    newPath.splice(newPath.length - 1, 1);
    console.log(newPath);
      if(newPath.length==0){
        newPath=["root"]
      }
    let validPath=newPath.join('/')
    console.log(validPath,"validpath at 227");
    
    updateCurrentList(validPath)
    setPath(validPath);
    console.log(path,'path at 226');
    
    console.log(currentList,'path at 228');
    
    console.log(currentList,'path at 230');
    setResult([]);
    setQueryValue("")
  }

  const searchFolder=(e: ChangeEvent<HTMLInputElement>)=>{
    const originalList=list;

    currentList=list.filter((singleList)=>{
 
      return singleList.name.toLowerCase().includes(e.target.value.toLowerCase());
    })
 
     if(e.target.value==''){
      updateCurrentList(path)
     }else{
       setCurrentList(currentList)
     }


  }

  const updateCurrentList=(validPath:string)=>{
     


     let listToberender=list.filter((singleList)=>{
      console.log(validPath==singleList.parent);  
      console.log(path);
      console.log(singleList.parent); 
        if(validPath==singleList.parent){  
            
          return singleList
        };
    }) 
   console.log(path,"path at 264");
   
    setCurrentList(listToberender);
    console.log(listToberender,"list to be rendered ");
    
  }

// let currentList=[];
//     useEffect(()=>{
      
//      currentList list.filter((ls)=>{
      
//         ls.directory

//       })

      
//     },[path])

const sideBar=(newList:structure[])=>{

  // list.map((list: structure, key: number) => {
                  //   return (<DisplayName key={key} listDetails={list}/>);
                  // })}
 console.log("sidebar called at 268");
 
let leftContent=[];

      
    leftContent=rootList.filter((singleList)=>{
       
        if(singleList.parent=='root'){
          leftContent.push(singleList);
        }

      return singleList
      // leftContent.push(<li key={item.id}>{item.animal}</li>);
    })

    console.log(leftContent,'leftContent at 286');
    
    let newArr=[...leftContent,newList];
    console.log(newArr);
    
    setSidebarList([...leftContent,...newList]);
}



  return (
    <div className="App">
        
        <div className='left'>
            <div className='leftContent'>
            <div style={{color:"grey",fontWeight:"bold",fontSize:"large"}}>Root</div>
            
                  <div className="hasAllFoldersName">
                  { 
                  sideBarList.map((singleList,key:number)=>{

                    return (<DisplayName key={key} listDetails={singleList}/>);
                 
                 
                  })
               
                     }
                    
                  
                  
                  </div>
 
            </div>
        </div>
      
        <div className='right'>
          {/* rightContent */}
          <div className='rightContent' style={{overflow: "auto"}}>
          <div style={{width:"100%",display:"flex"}}>
          <i  onClick={updatePath} className="bi bi-arrow-return-left" style={{ fontSize:"40px"}}></i>
              <div className='navbar'>
                <span style={{fontWeight:"bold",fontSize:"large",marginTop:"20px"}}>{path}</span>
                <span>
                    <div style={{height:"50px",width:"130px",padding:"20px"}}>
                      <input onChange={searchFolder} placeholder='Search your Folder/File....' style={{height:"40px",width:"300px"}}/>
                    </div>
              </span>
              </div>

          </div>

          {/* <div>
              <h1>Unsplash API</h1>
              <input onChange={handlePhotoname} value={queryValue}type="text" name="photo" placeholder="Search photo"/>
              <button onClick={handleSubmit} type="submit">Search</button>
          </div> */}
  
          </div>

          <div className='displayData' style={{display:"flex",overflow: "auto"}}>
              <span style={{display:"flex",flexWrap:"wrap"}}>{ 
                                  
                                  (currentList.length>0||path!='root')?
                                  currentList.map((singleList: structure, key: number) => {
    
                            return  ( <span key={key}style={{alignItems:"center"}}>
                                          <span  onClick={()=> settingPathValue(singleList.name,singleList.type)} style={{color: 'lightblue'}} className={"size bi bi-folder-fill "}></span>
                                          <p style={{alignContent:"center"}}>{singleList.name}</p>
                                     </span>)
                                    }):
                                    rootList.length>1?
                                    rootList.map((singleList: structure, key: number) => {
                             return  (<span key={key}style={{alignItems:"center"}}>
                                          <span  onClick={()=> settingPathValue(singleList.name,singleList.type)} style={{color: 'lightblue'}} className={"size bi bi-folder-fill "}></span>
                                          <p style={{alignContent:"center"}}>{singleList.name}</p>
                                      </span>)
                                    }):

                                    <i className="size bi bi-plus-square-dotted"  data-toggle="modal" data-target="#exampleModalCenter" ></i>}
                                  
              </span>
          </div>

          <div>
              {result.length?result.map((photo:any,key:number)=>{
                return <img width="100px" height="100px" style={{margin:"10px",borderRadius:"15px"}}key={key} src={photo.urls.small}/>
              }):""}
            </div>

          </div>

        <div className="folderDiv" >

          <div style={{margin:"40px",fontSize:"60px",marginTop:"30px"}}>
              <span >
                      <i className="bi bi-plus-square-dotted"   data-toggle="modal" data-target="#exampleModalCenter" ></i>
              </span>
          </div>
          {/* font-size:100px;
  margin-left:40px; */}

          <div className="modal fade" id="exampleModalCenter" tabIndex={-1} role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
            <div className="modal-dialog modal-dialog-centered" role="document">
              <div className="modal-content">
                <div className="modal-header">
                  <h5 className="modal-title" id="exampleModalLongTitle" >Create New</h5>
                  <button type="button" className="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                  </button>
                </div>
                <div className="modal-body">
                  <span>
                    <span>
                      <button  onClick={()=> setType("file")} className='create btn-primary'>Create File</button>
                    </span>
                    <span>
                      <button  onClick={()=>setType("folder")}className='create btn-primary'>Create Folder</button>
                    </span>
                  </span>
                  <div className='modalInputs'>
                    <div>
                      <input value={name}  name="name" onChange={handleChange} placeholder='Name'/>
                    </div>
                    <div>
                      <input value={creator} name="creator" onChange={handleChange} placeholder='Creator'/>
                    </div>
                    <div>
                      <input value={size} name="size" onChange={handleChange} placeholder='Size'/>
                    </div>
                    <div>
                      <input placeholder='Date'/>
                    </div>
                  </div>
                </div>
                <div className="modal-footer">
                  <button type="button" className="btn btn-secondary" data-dismiss="modal">Close</button>
                  <button onClick={buttonHandler} type="button" data-dismiss="modal" className="buttonClick btn btn-primary">Save changes</button>
                </div>
              </div>
            </div>
          </div>
        </div>

    </div>
  );
}
export default App;